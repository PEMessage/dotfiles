#!/usr/bin/env python3
# coding: utf-8

import re
from dataclasses import dataclass
from enum import Enum
from typing import List
import sys
import pprint

@dataclass
class MemoryDump:
    mCap: int
    mLen: int
    mContent: bytes
    mOffset: int
    is_valid: bool


    @classmethod
    def extract(cls, log_lines: List[str], offset = 0) -> 'MemoryDump':
        # memory_dump = MemoryDump()
        mLen = 0
        mCap = 0
        mContent: bytes = b''
        mOffset = 0
        is_valid = False
        for index, line in enumerate(log_lines[offset:]):
            # Extract mCap and mLen
            mOffset = index + offset
            if '[Dump]' in line and "'mCap'" in line and "'mLen'" in line :
                # print(f"Start process {mOffset}")
                match = re.search(r"'mCap'\s*:\s*(\d+);\s*'mLen'\s*:\s*(\d+)", line)
                if match:
                    mCap = int(match.group(1))
                    mLen = int(match.group(2))
            # Extract memory data
            elif "[dumpMemoryWithIndents]" in line and '[0x' in line:
                hex_strings = re.findall(r"(0x[0-9a-fA-F]{2})(?:,|$)", line)
                mContent += bytes(int(h, 16) for h in hex_strings)

                if len(mContent) == mLen or len(mContent) == mCap:
                    is_valid = True
                    break
        return cls(mCap, mLen, mContent, mOffset, is_valid) 

    @classmethod
    def extracts(cls, log_lines: List[str]) -> List['MemoryDump']:
        offset = 0
        ret = []
        while(offset < len(lines)):
            md = cls.extract(lines,offset)
            if md.is_valid:
                # print(md)
                offset = md.mOffset + 1
                ret.append(md)
            else:
                # print(md)
                break
        return ret

# if __name__ == "__main__":
    # log_data = [
    # ]
    # memory_dump = MemoryDump.extract(log_data)
    # import pprint
    # pprint.pprint(memory_dump)


if __name__ == "__main__":
    # See: https://stackoverflow.com/questions/72236607/how-to-get-python-to-tolerate-utf-8-encoding-errors
    lines = sys.stdin.buffer.read().decode(errors='replace').splitlines()
    pprint.pprint(MemoryDump.extracts(lines))



    
